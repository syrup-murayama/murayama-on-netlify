// unfold transition
@function unfoldTransition ($transition) {
	// Default values
	$property: all;
	$duration: .3s;
	$easing: null;
	// Browser default is ease, which is what we want
	$delay: null;
	// Browser default is 0, which is what we want
	$defaultProperties: ($property, $duration, $easing, $delay);
	// Grab transition properties if they exist
	$unfoldedTransition: ();

	@for $i from 1 through length($defaultProperties) {
		$p: null;

		@if $i <= length($transition) {
			$p: nth($transition, $i)
		}

		@else {
			$p: nth($defaultProperties, $i)
		}

		$unfoldedTransition:append($unfoldedTransition, $p);
	}

	@return $unfoldedTransition;
}

// linear-gradient functions

// test if `$value` is a valid direction
@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

// convert a direction to legacy syntax
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}
